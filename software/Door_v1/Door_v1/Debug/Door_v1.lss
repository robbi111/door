
Door_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000158  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000220  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000131a  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000973  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000676  00000000  00000000  00001f75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d0  00000000  00000000  000025ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000667  00000000  00000000  000026bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ca  00000000  00000000  00002d23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000030ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_3>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 43 00 	call	0x86	; 0x86 <main>
  78:	0c 94 aa 00 	jmp	0x154	; 0x154 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
	system_init();
  80:	0e 94 54 00 	call	0xa8	; 0xa8 <system_init>
  84:	08 95       	ret

00000086 <main>:
#include <atmel_start.h>

int main(void)
{
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
  86:	0e 94 40 00 	call	0x80	; 0x80 <atmel_start_init>
	cpu_irq_enable();
  8a:	78 94       	sei
 *
 * \param mode Sleep mode
 */
static inline void sleep_set_mode(uint8_t mode)
{
	SMCR = mode | (SMCR & ~((1 << SM0) | (1 << SM1) | (1 << SM2)));
  8c:	83 b7       	in	r24, 0x33	; 51
  8e:	81 7f       	andi	r24, 0xF1	; 241
  90:	84 60       	ori	r24, 0x04	; 4
  92:	83 bf       	out	0x33, r24	; 51
	
	sleep_set_mode(0 << SM2 | 1 << SM1 | 0 << SM0);
	sleep_enable();
  94:	83 b7       	in	r24, 0x33	; 51
  96:	81 60       	ori	r24, 0x01	; 1
  98:	83 bf       	out	0x33, r24	; 51

	/* Replace with your application code */
	while (1) {
		sleep_enter();
  9a:	88 95       	sleep
  9c:	fe cf       	rjmp	.-4      	; 0x9a <main+0x14>

0000009e <EXTERNAL_IRQ_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
  9e:	21 98       	cbi	0x04, 1	; 4
		DDRB &= ~(1 << pin);

		PORTB |= 1 << pin;
	} else if (pull_mode == PORT_PULL_OFF) {

		PORTB &= ~(1 << pin);
  a0:	29 98       	cbi	0x05, 1	; 5
	    // <id> pad_pull_config
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	EXTERNAL_IRQ_0_init();
  a2:	0e 94 7d 00 	call	0xfa	; 0xfa <EXTERNAL_IRQ_0_init>
  a6:	08 95       	ret

000000a8 <system_init>:
{
	/* On AVR devices all peripherals are enabled from power on reset, this
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	PRR = (1 << PRSPI) | (1 << PRTIM2) | (1 << PRTIM0) | (1 << PRTIM1) | (1 << PRTWI) | (1 << PRUSART0) | (1 << PRADC);
  a8:	8f ee       	ldi	r24, 0xEF	; 239
  aa:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
		break;
	case PORT_DIR_OUT:
		DDRB |= mask;
		break;
	case PORT_DIR_OFF:
		DDRB &= ~mask;
  ae:	84 b1       	in	r24, 0x04	; 4
  b0:	14 b8       	out	0x04, r1	; 4

		PORTB |= mask;
  b2:	85 b1       	in	r24, 0x05	; 5
  b4:	9f ef       	ldi	r25, 0xFF	; 255
  b6:	95 b9       	out	0x05, r25	; 5
		break;
	case PORT_DIR_OUT:
		DDRC |= mask;
		break;
	case PORT_DIR_OFF:
		DDRC &= ~mask;
  b8:	87 b1       	in	r24, 0x07	; 7
  ba:	80 78       	andi	r24, 0x80	; 128
  bc:	87 b9       	out	0x07, r24	; 7

		PORTC |= mask;
  be:	88 b1       	in	r24, 0x08	; 8
  c0:	8f 67       	ori	r24, 0x7F	; 127
  c2:	88 b9       	out	0x08, r24	; 8
		break;
	case PORT_DIR_OUT:
		DDRD |= mask;
		break;
	case PORT_DIR_OFF:
		DDRD &= ~mask;
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	1a b8       	out	0x0a, r1	; 10

		PORTD |= mask;
  c8:	8b b1       	in	r24, 0x0b	; 11
  ca:	9b b9       	out	0x0b, r25	; 11
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
  cc:	20 98       	cbi	0x04, 0	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);
  ce:	20 98       	cbi	0x04, 0	; 4

		PORTB |= 1 << pin;
  d0:	28 9a       	sbi	0x05, 0	; 5
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir direction)
{
	switch (direction) {
	case PORT_DIR_IN:
		DDRB &= ~(1 << pin);
  d2:	25 98       	cbi	0x04, 5	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{

	if (pull_mode == PORT_PULL_UP) {

		DDRB &= ~(1 << pin);
  d4:	25 98       	cbi	0x04, 5	; 4

		PORTB |= 1 << pin;
  d6:	2d 9a       	sbi	0x05, 5	; 5
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
  d8:	3c 9a       	sbi	0x07, 4	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
  da:	44 98       	cbi	0x08, 4	; 8
	switch (direction) {
	case PORT_DIR_IN:
		DDRC &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRC |= 1 << pin;
  dc:	3d 9a       	sbi	0x07, 5	; 7
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
	} else {
		PORTC &= ~(1 << pin);
  de:	45 98       	cbi	0x08, 5	; 8
	switch (direction) {
	case PORT_DIR_IN:
		DDRD &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		DDRD |= 1 << pin;
  e0:	53 9a       	sbi	0x0a, 3	; 10
static inline void PORTD_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTD |= 1 << pin;
	} else {
		PORTD &= ~(1 << pin);
  e2:	5b 98       	cbi	0x0b, 3	; 11
 * \return Initialization status.
 */
static inline int8_t sysctrl_init()
{
	/* Set up system clock prescaler according to configuration */
	protected_write_io((void *)&CLKPR, 1 << CLKPCE, (0 << CLKPS3) | (0 << CLKPS2) | (1 << CLKPS1) | (1 << CLKPS0));
  e4:	43 e0       	ldi	r20, 0x03	; 3
  e6:	60 e8       	ldi	r22, 0x80	; 128
  e8:	81 e6       	ldi	r24, 0x61	; 97
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 a3 00 	call	0x146	; 0x146 <protected_write_io>

	SMCR = (0 << SM2) | (0 << SM1) | (0 << SM0) | // Idle
  f0:	13 be       	out	0x33, r1	; 51
	       (0 << SE);

	MCUCR = (0 << PUD);
  f2:	15 be       	out	0x35, r1	; 53
	    // <true"> High
	    false);

	sysctrl_init();

	EXTERNAL_IRQ_0_initialization();
  f4:	0e 94 4f 00 	call	0x9e	; 0x9e <EXTERNAL_IRQ_0_initialization>
  f8:	08 95       	ret

000000fa <EXTERNAL_IRQ_0_init>:
 * \return Initialization status.
 */
int8_t EXTERNAL_IRQ_0_init()
{

	PCICR = (1 << PCIE0); // Enable pin change interrupt 0
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>

	PCMSK0 = (1 << PCINT1); // Pin change enable mask 1
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>

	return 0;
}
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret

0000010a <__vector_3>:
 *  Author: Robert
 */ 
#include <atmel_start.h>


ISR(PCINT0_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
	if (OPEN_CLOSE_get_level()) {	// open door
 114:	19 99       	sbic	0x03, 1	; 3
 116:	03 c0       	rjmp	.+6      	; 0x11e <__vector_3+0x14>
			MOTOR_REV_set_level(false);
		}
		MOTOR_FWD_set_level(false);
		MOTOR_REV_set_level(false);
	} else {
		while (!BOTTOM_SENS_get_level())	// check if bottom sensor is reached
 118:	18 9b       	sbis	0x03, 0	; 3
 11a:	0a c0       	rjmp	.+20     	; 0x130 <__vector_3+0x26>
 11c:	0d c0       	rjmp	.+26     	; 0x138 <__vector_3+0x2e>
#include <atmel_start.h>


ISR(PCINT0_vect) {
	if (OPEN_CLOSE_get_level()) {	// open door
		while (!TOP_SENS_get_level())	// check if top sensor is reached
 11e:	1d 99       	sbic	0x03, 5	; 3
 120:	04 c0       	rjmp	.+8      	; 0x12a <__vector_3+0x20>
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 122:	44 9a       	sbi	0x08, 4	; 8
	} else {
		PORTC &= ~(1 << pin);
 124:	45 98       	cbi	0x08, 5	; 8
 126:	1d 9b       	sbis	0x03, 5	; 3
 128:	fc cf       	rjmp	.-8      	; 0x122 <__vector_3+0x18>
 12a:	44 98       	cbi	0x08, 4	; 8
 12c:	45 98       	cbi	0x08, 5	; 8
 12e:	06 c0       	rjmp	.+12     	; 0x13c <__vector_3+0x32>
 130:	44 98       	cbi	0x08, 4	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level) {
		PORTC |= 1 << pin;
 132:	45 9a       	sbi	0x08, 5	; 8
			MOTOR_REV_set_level(false);
		}
		MOTOR_FWD_set_level(false);
		MOTOR_REV_set_level(false);
	} else {
		while (!BOTTOM_SENS_get_level())	// check if bottom sensor is reached
 134:	18 9b       	sbis	0x03, 0	; 3
 136:	fc cf       	rjmp	.-8      	; 0x130 <__vector_3+0x26>
	} else {
		PORTC &= ~(1 << pin);
 138:	44 98       	cbi	0x08, 4	; 8
 13a:	45 98       	cbi	0x08, 5	; 8
			MOTOR_REV_set_level(true);
		}
		MOTOR_FWD_set_level(false);
		MOTOR_REV_set_level(false);
	}
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <protected_write_io>:
#if defined(__GNUC__)
	/*
	 * We need to disable interrupts globally before the protected
	 * sequence. In order to do that we must save SREG first.
	 */
	in      r18,    _SFR_IO_ADDR(SREG)
 146:	2f b7       	in	r18, 0x3f	; 63
	cli
 148:	f8 94       	cli
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
 14a:	fc 01       	movw	r30, r24
	st      Z, r22                  // Write protection bit to I/O register
 14c:	60 83       	st	Z, r22
	st      Z, r20                  // Write value to I/O register
 14e:	40 83       	st	Z, r20
	out     _SFR_IO_ADDR(SREG), r18
 150:	2f bf       	out	0x3f, r18	; 63

	ret                             // Return to caller
 152:	08 95       	ret

00000154 <_exit>:
 154:	f8 94       	cli

00000156 <__stop_program>:
 156:	ff cf       	rjmp	.-2      	; 0x156 <__stop_program>
